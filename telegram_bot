import sqlite3
import telebot
from telebot import types
import os
from dotenv import load_dotenv


load_dotenv()
TOKEN = os.getenv('token')
BD = os.getenv('BD_1')


bot = telebot.TeleBot(TOKEN)

def init_database():
    conn = sqlite3.connect(BD)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_ids (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY,
            user_id INTEGER,
            chat_id INTEGER,
            text TEXT,
            date TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS video_bot_2 (
            user_id INTEGER,
            video_id TEXT,
            date TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS photo_id_2 (
            user_id INTEGER,
            photo_id TEXT,
            date TEXT
        )
    ''')

init_database()

@bot.message_handler(commands=['d;,fmo320x2'])
def start(message):
    with sqlite3.connect(BD) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO user_ids (user_id)
            VALUES (?)
        ''', (message.from_user.id,))
        conn.commit()

    bot.reply_to(message, 'Привет! Я бот. Напиши мне что нибудь.')

@bot.message_handler(func=lambda message: True)
def save_user_id_and_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text
    date = message.date

    with sqlite3.connect(BD) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO user_ids (user_id)
            VALUES (?)
        ''', (user_id,))
        cursor.execute('''
            INSERT INTO messages (user_id, chat_id, text, date)
            VALUES (?, ?, ?, ?)
        ''', (user_id, chat_id, text, date))
        conn.commit()

    



@bot.message_handler(content_types=['photo'])
def save_photo(message):
    user_id = message.from_user.id
    photo_id = message.photo[-1].file_id  # используем последнюю фотографию с максимальным разрешением
    date = message.date

    file_info = bot.get_file(photo_id)
    file_path = file_info.file_path
    downloaded_file = bot.download_file(file_path)
    
    with open(f'photos/{photo_id}.jpg', 'wb') as new_file:        
        new_file.write(downloaded_file)
    
        with sqlite3.connect(BD) as conn:
            cursor = conn.cursor()

            cursor.execute('''
                INSERT INTO photo_id_2 (user_id, photo_id, date)
                VALUES (?, ?, ?)
            ''', (user_id, photo_id, date))
            conn.commit()
    
       


    #bot.reply_to(message, 'Это фото.')
@bot.message_handler(content_types=['video'])
def save_video(message):
    user_id = message.from_user.id
    video_id = message.video.file_id  
    date = message.date

  
    file_info = bot.get_file(video_id)
    file_path = file_info.file_path
    downloaded_file = bot.download_file(file_path)
    with open(f'videos/{video_id}.mp4', 'wb') as new_file:
        new_file.write(downloaded_file)
        with sqlite3.connect(BD) as conn:
            cursor = conn.cursor()

            cursor.execute('''
                INSERT INTO video_bot_2 (user_id, video_id, date)
                VALUES (?, ?, ?)
            ''', (user_id, video_id, date))
            conn.commit()



    
def get_contact_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    contact_button = types.InlineKeyboardButton(text='Отправить контакт', callback_data='request_contact')
    keyboard.add(contact_button)
    return keyboard

# Запуск бота
bot.polling()
